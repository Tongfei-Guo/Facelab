### Starting build.
# Target: facelab.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:facelab.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules facelab.ml > facelab.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends # cached
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o ast.cmo ast.ml # cached
# Target: matrix.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:matrix.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules matrix.ml > matrix.ml.depends # cached
# Target: matrix.cmo, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:cmo, extension:ml, file:matrix.cmo, file:matrix.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o matrix.cmo matrix.ml # cached
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o codegen.cmo codegen.ml # cached
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), package(str), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o parser.cmi parser.mli # cached
# Target: Preprocess.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:Preprocess.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules Preprocess.ml > Preprocess.ml.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), package(str), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q scanner.mll # cached
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends # cached
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o scanner.cmo scanner.ml # cached
# Target: Preprocess.cmo, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:cmo, extension:ml, file:Preprocess.cmo, file:Preprocess.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o Preprocess.cmo Preprocess.ml
# Target: facelab.cmo, tags: { package(llvm), package(llvm.analysis), package(str), byte, compile, extension:cmo, extension:ml, file:facelab.cmo, file:facelab.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o facelab.cmo facelab.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o ast.cmx ast.ml
# Target: matrix.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:matrix.cmx, file:matrix.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o matrix.cmx matrix.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), package(str), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
# Target: Preprocess.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:Preprocess.cmx, file:Preprocess.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o Preprocess.cmx Preprocess.ml
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: facelab.cmx, tags: { package(llvm), package(llvm.analysis), package(str), compile, extension:cmx, extension:ml, file:facelab.cmx, file:facelab.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o facelab.cmx facelab.ml
# Target: facelab.native, tags: { package(llvm), package(llvm.analysis), package(str), dont_link_with, extension:native, file:facelab.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package str -package llvm.analysis -package llvm Preprocess.cmx ast.cmx matrix.cmx codegen.cmx parser.cmx scanner.cmx facelab.cmx -o facelab.native
# Compilation successful.
