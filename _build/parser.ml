type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | REMAINDER
  | INNERPRODUCT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | DOUBLE
  | BOOL
  | STRING
  | ELIF
  | BREAK
  | CONTINUE
  | VOID
  | FUNCTION
  | MATRIX
  | IMAGE
  | FILTER
  | INT_LITERAL of (int)
  | DOUBLE_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* REMAINDER *);
  272 (* INNERPRODUCT *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* INT *);
  289 (* DOUBLE *);
  290 (* BOOL *);
  291 (* STRING *);
  292 (* ELIF *);
  293 (* BREAK *);
  294 (* CONTINUE *);
  295 (* VOID *);
  296 (* FUNCTION *);
  297 (* MATRIX *);
  298 (* IMAGE *);
  299 (* FILTER *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* INT_LITERAL *);
  301 (* DOUBLE_LITERAL *);
  302 (* STRING_LITERAL *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\005\000\006\000\006\000\
\009\000\009\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\004\000\007\000\007\000\008\000\008\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\012\000\012\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\008\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\000\000\002\000\000\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\061\000\000\000\000\000\021\000\000\000\000\000\
\036\000\037\000\000\000\000\000\000\000\000\000\011\000\012\000\
\013\000\017\000\014\000\016\000\015\000\033\000\035\000\034\000\
\000\000\001\000\003\000\004\000\005\000\000\000\000\000\000\000\
\000\000\000\000\052\000\053\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\026\000\022\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\041\000\042\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\055\000\000\000\
\000\000\000\000\030\000\019\000\000\000\000\000\000\000\000\000\
\000\000\010\000\028\000\000\000\020\000\000\000\000\000\006\000\
\029\000"

let yydgoto = "\002\000\
\003\000\004\000\062\000\028\000\029\000\068\000\105\000\034\000\
\069\000\030\000\031\000\066\000\072\000\073\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\047\000\228\255\000\000\228\255\228\255\
\000\000\000\000\065\255\016\255\017\255\023\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\255\000\000\000\000\000\000\000\000\243\254\086\000\003\255\
\040\001\127\255\000\000\000\000\000\000\108\000\228\255\228\255\
\228\255\081\255\228\255\038\255\000\000\228\255\228\255\228\255\
\228\255\228\255\228\255\228\255\228\255\228\255\228\255\228\255\
\228\255\228\255\228\255\000\000\000\000\000\000\000\000\060\001\
\098\001\039\255\080\001\043\255\058\255\026\255\098\001\074\255\
\076\255\098\001\000\000\247\254\247\254\000\000\000\000\000\000\
\235\255\235\255\124\255\124\255\124\255\124\255\133\001\116\001\
\187\255\228\255\187\255\080\255\124\001\000\000\000\000\228\255\
\051\255\130\000\000\000\000\000\049\255\098\001\187\255\228\255\
\124\001\000\000\000\000\083\255\000\000\138\255\187\255\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\152\000\000\000\000\000\000\000\000\000\000\000\000\000\011\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\255\
\000\000\094\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\255\000\000\000\000\000\000\000\000\000\000\
\069\255\000\000\000\000\000\000\099\255\000\000\021\255\000\000\
\100\255\062\255\000\000\178\000\204\000\000\000\000\000\000\000\
\223\255\038\000\214\000\240\000\250\000\020\001\068\255\075\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\032\255\000\000\105\255\
\176\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\252\255\012\000\000\000\000\000\000\000\013\000\
\000\000\225\255\002\000\015\000\000\000\000\000"

let yytablesize = 678
let yytable = "\027\000\
\027\000\048\000\049\000\042\000\059\000\050\000\033\000\001\000\
\035\000\036\000\070\000\038\000\038\000\038\000\043\000\043\000\
\038\000\039\000\040\000\038\000\038\000\038\000\038\000\059\000\
\041\000\038\000\059\000\038\000\038\000\038\000\038\000\038\000\
\038\000\044\000\060\000\038\000\038\000\060\000\075\000\090\000\
\064\000\065\000\067\000\071\000\074\000\092\000\026\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\071\000\101\000\054\000\093\000\
\054\000\037\000\005\000\054\000\050\000\032\000\050\000\032\000\
\094\000\050\000\007\000\051\000\095\000\051\000\008\000\103\000\
\051\000\096\000\005\000\100\000\097\000\111\000\099\000\009\000\
\010\000\031\000\007\000\098\000\050\000\050\000\008\000\106\000\
\007\000\102\000\107\000\057\000\051\000\008\000\058\000\009\000\
\010\000\065\000\113\000\031\000\022\000\023\000\024\000\032\000\
\015\000\016\000\017\000\018\000\109\000\110\000\108\000\019\000\
\000\000\020\000\021\000\000\000\022\000\023\000\024\000\032\000\
\005\000\000\000\006\000\061\000\046\000\047\000\048\000\049\000\
\007\000\000\000\050\000\005\000\008\000\006\000\112\000\000\000\
\000\000\000\000\000\000\007\000\000\000\009\000\010\000\008\000\
\000\000\011\000\012\000\000\000\013\000\014\000\000\000\000\000\
\009\000\010\000\000\000\000\000\011\000\012\000\000\000\013\000\
\014\000\000\000\022\000\023\000\024\000\032\000\000\000\000\000\
\000\000\021\000\000\000\021\000\021\000\022\000\023\000\024\000\
\032\000\021\000\000\000\000\000\005\000\021\000\006\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\021\000\021\000\
\008\000\000\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\009\000\010\000\000\000\000\000\011\000\012\000\000\000\
\013\000\014\000\000\000\021\000\021\000\021\000\021\000\044\000\
\000\000\044\000\000\000\000\000\044\000\005\000\022\000\023\000\
\024\000\032\000\000\000\000\000\000\000\007\000\000\000\044\000\
\044\000\008\000\000\000\046\000\047\000\048\000\049\000\044\000\
\044\000\050\000\009\000\010\000\000\000\053\000\054\000\055\000\
\056\000\000\000\027\000\000\000\027\000\027\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\027\000\022\000\
\023\000\024\000\032\000\000\000\000\000\000\000\000\000\027\000\
\027\000\000\000\000\000\027\000\027\000\000\000\027\000\027\000\
\027\000\027\000\027\000\027\000\000\000\000\000\045\000\027\000\
\045\000\027\000\027\000\045\000\027\000\027\000\027\000\027\000\
\005\000\000\000\006\000\000\000\000\000\000\000\045\000\045\000\
\007\000\000\000\000\000\000\000\008\000\000\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\000\000\011\000\012\000\000\000\013\000\014\000\015\000\016\000\
\017\000\018\000\000\000\000\000\000\000\019\000\045\000\020\000\
\021\000\000\000\022\000\023\000\024\000\025\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000\000\000\051\000\052\000\
\053\000\054\000\055\000\056\000\063\000\000\000\057\000\058\000\
\000\000\000\000\000\000\000\000\046\000\047\000\048\000\049\000\
\000\000\000\000\050\000\000\000\051\000\052\000\053\000\054\000\
\055\000\056\000\104\000\000\000\057\000\058\000\000\000\000\000\
\000\000\000\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\000\000\051\000\052\000\053\000\054\000\055\000\056\000\
\038\000\000\000\057\000\058\000\000\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\000\000\000\000\038\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\
\038\000\038\000\039\000\000\000\039\000\000\000\000\000\039\000\
\000\000\000\000\039\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\039\000\039\000\040\000\000\000\040\000\000\000\
\000\000\040\000\000\000\000\000\040\000\040\000\046\000\000\000\
\046\000\000\000\000\000\046\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\046\000\
\047\000\000\000\047\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\048\000\000\000\048\000\000\000\000\000\048\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\047\000\047\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\048\000\048\000\049\000\000\000\049\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\060\000\000\000\049\000\049\000\000\000\000\000\
\046\000\047\000\048\000\049\000\000\000\000\000\050\000\000\000\
\051\000\052\000\053\000\054\000\055\000\056\000\089\000\000\000\
\057\000\058\000\000\000\000\000\046\000\047\000\048\000\049\000\
\000\000\000\000\050\000\000\000\051\000\052\000\053\000\054\000\
\055\000\056\000\091\000\000\000\057\000\058\000\000\000\000\000\
\046\000\047\000\048\000\049\000\000\000\000\000\050\000\000\000\
\051\000\052\000\053\000\054\000\055\000\056\000\000\000\000\000\
\057\000\058\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\000\000\051\000\052\000\053\000\054\000\055\000\056\000\
\000\000\000\000\057\000\058\000\046\000\047\000\048\000\049\000\
\000\000\000\000\050\000\000\000\051\000\052\000\053\000\054\000\
\055\000\056\000\000\000\000\000\057\000\046\000\047\000\048\000\
\049\000\000\000\000\000\050\000\000\000\051\000\052\000\053\000\
\054\000\055\000\056\000\015\000\016\000\017\000\018\000\000\000\
\000\000\000\000\019\000\000\000\020\000\021\000"

let yycheck = "\004\000\
\000\000\011\001\012\001\002\001\002\001\015\001\005\000\001\000\
\007\000\008\000\042\000\001\001\011\000\003\001\013\001\013\001\
\006\001\002\001\002\001\009\001\010\001\011\001\012\001\003\001\
\002\001\015\001\006\001\017\001\018\001\019\001\020\001\021\001\
\022\001\047\001\003\001\025\001\026\001\006\001\001\001\001\001\
\039\000\040\000\041\000\042\000\043\000\003\001\000\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\093\000\001\001\006\001\
\003\001\001\001\002\001\006\001\001\001\001\001\003\001\003\001\
\047\001\006\001\010\001\001\001\003\001\003\001\014\001\029\001\
\006\001\006\001\002\001\004\001\089\000\003\001\091\000\023\001\
\024\001\001\001\010\001\090\000\025\001\026\001\014\001\047\001\
\003\001\096\000\103\000\003\001\026\001\003\001\003\001\023\001\
\024\001\104\000\111\000\003\001\044\001\045\001\046\001\047\001\
\032\001\033\001\034\001\035\001\105\000\105\000\104\000\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\046\001\047\001\
\002\001\255\255\004\001\005\001\009\001\010\001\011\001\012\001\
\010\001\255\255\015\001\002\001\014\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\023\001\024\001\014\001\
\255\255\027\001\028\001\255\255\030\001\031\001\255\255\255\255\
\023\001\024\001\255\255\255\255\027\001\028\001\255\255\030\001\
\031\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\002\001\255\255\004\001\005\001\044\001\045\001\046\001\
\047\001\010\001\255\255\255\255\002\001\014\001\004\001\255\255\
\255\255\255\255\255\255\255\255\010\001\255\255\023\001\024\001\
\014\001\255\255\027\001\028\001\255\255\030\001\031\001\255\255\
\255\255\023\001\024\001\255\255\255\255\027\001\028\001\255\255\
\030\001\031\001\255\255\044\001\045\001\046\001\047\001\001\001\
\255\255\003\001\255\255\255\255\006\001\002\001\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\010\001\255\255\017\001\
\018\001\014\001\255\255\009\001\010\001\011\001\012\001\025\001\
\026\001\015\001\023\001\024\001\255\255\019\001\020\001\021\001\
\022\001\255\255\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\044\001\
\045\001\046\001\047\001\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\001\001\039\001\
\003\001\041\001\042\001\006\001\044\001\045\001\046\001\047\001\
\002\001\255\255\004\001\255\255\255\255\255\255\017\001\018\001\
\010\001\255\255\255\255\255\255\014\001\255\255\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\023\001\024\001\255\255\
\255\255\027\001\028\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\001\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\001\001\255\255\025\001\026\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\001\001\255\255\025\001\026\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\001\001\255\255\025\001\026\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\009\001\010\001\001\001\255\255\
\003\001\255\255\255\255\006\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\003\001\255\255\025\001\026\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\003\001\255\255\
\025\001\026\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\003\001\255\255\025\001\026\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\025\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\032\001\033\001\034\001\035\001\255\255\
\255\255\255\255\039\001\255\255\041\001\042\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  REMAINDER\000\
  INNERPRODUCT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  DOUBLE\000\
  BOOL\000\
  STRING\000\
  ELIF\000\
  BREAK\000\
  CONTINUE\000\
  VOID\000\
  FUNCTION\000\
  MATRIX\000\
  IMAGE\000\
  FILTER\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  DOUBLE_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 39 "parser.mly"
            ( let (fst, snd, thd) = _1 in (List.rev fst, List.rev snd, List.rev thd) )
# 426 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                 ( [], [], [] )
# 432 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 43 "parser.mly"
               ( let (fst, snd, thd) = _1 in (_2 :: fst), snd, thd )
# 440 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( let (fst, snd, thd) = _1 in fst, (_2 :: snd), thd )
# 448 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
               ( let (fst, snd, thd) = _1 in fst, snd, (_2 :: thd) )
# 456 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
     ( { typ = Void;
      fname = _1;
	 formals = _3;
	 locals = List.rev _6;
	 body = List.rev _7 } )
# 470 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                  ( [] )
# 476 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 57 "parser.mly"
                  ( List.rev _1 )
# 483 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                             ( [(_1,_2)] )
# 491 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
                             ( (_3,_4) :: _1 )
# 500 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
        ( Int )
# 506 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
           ( Double )
# 512 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
         ( Bool )
# 518 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
         ( Void)
# 524 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
          (Image)
# 530 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
           (Matrix)
# 536 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
           (String)
# 542 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 73 "parser.mly"
              ( (_1, _2) )
# 550 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                     ( [] )
# 556 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 77 "parser.mly"
                     ( _2 :: _1 )
# 564 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                   ( [] )
# 570 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                   ( _2 :: _1 )
# 578 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
              ( Expr _1 )
# 585 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                ( Return Noexpr )
# 591 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                     ( Return _2 )
# 598 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 87 "parser.mly"
                            ( Block(List.rev _2) )
# 605 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 613 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                            ( If(_3, _5, _7) )
# 622 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 632 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                  ( While(_3, _5) )
# 640 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                  ( Noexpr )
# 646 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                  ( _1 )
# 653 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "parser.mly"
                     ( IntLit(_1) )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                     ( StringLit(_1) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 103 "parser.mly"
                     ( DoubleLit(_1) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                     ( BoolLit(true) )
# 680 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                     ( BoolLit(false) )
# 686 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                     ( Id(_1) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                       ( Binop(_1, Rmdr, _3) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                         ( Unop(Neg, _2) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Unop(Not, _2) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Assign(_1, _3) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 123 "parser.mly"
                                 ( Call(_1, _3) )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                       ( _2 )
# 834 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                  ( [] )
# 840 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 128 "parser.mly"
                  ( List.rev _1 )
# 847 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                            ( [_1] )
# 854 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                            ( _3 :: _1 )
# 862 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
