; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.2 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.3 = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.4 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.5 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.6 = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.7 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.8 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.9 = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.10 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.11 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.12 = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.13 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.14 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.15 = private unnamed_addr constant [3 x i8] c"%d\00"

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %d = alloca double
  store double 3.100000e+00, double* %d
  %i = alloca i32
  store i32 2, i32* %i
  %j = alloca double
  store double 0.000000e+00, double* %j
  %i1 = load i32, i32* %i
  %d2 = load double, double* %d
  %tmp = sitofp i32 %i1 to double
  %tmp3 = fmul double %tmp, %d2
  store double %tmp3, double* %j
  %j4 = load double, double* %j
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_double.14, i32 0, i32 0), double %j4)
  ret i32 0
}
