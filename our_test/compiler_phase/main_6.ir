; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_int.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_int.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_int.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@system_string = private unnamed_addr constant [11 x i8] c"now j is :\00"
@system_string.4 = private unnamed_addr constant [1 x i8] zeroinitializer
@system_string.5 = private unnamed_addr constant [7 x i8] c"hahaha\00"
@system_string.6 = private unnamed_addr constant [1 x i8] zeroinitializer
@system_string.7 = private unnamed_addr constant [11 x i8] c"now s is :\00"
@system_string.8 = private unnamed_addr constant [1 x i8] zeroinitializer
@system_string.9 = private unnamed_addr constant [4 x i8] c"abc\00"

define i32 @main() {
entry:
  %i = alloca i32
  store i32 2, i32* %i
  %j = alloca i32
  store i32 3, i32* %j
  %i1 = load i32, i32* %i
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %i1)
  %j2 = load i32, i32* %j
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %j2)
  store i32 0, i32* %i
  %i4 = load i32, i32* %i
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %i4)
  %f1_result = call i32 @f1()
  store i32 %f1_result, i32* %j
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @system_string, i32 0, i32 0))
  %j7 = load i32, i32* %j
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %j7)
  %my_str = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @system_string.4, i32 0, i32 0), i8** %my_str
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @system_string.5, i32 0, i32 0), i8** %my_str
  %my_str9 = load i8*, i8** %my_str
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* %my_str9)
  %s = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @system_string.6, i32 0, i32 0), i8** %s
  %f2_result = call i8* @f2()
  store i8* %f2_result, i8** %s
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @system_string.7, i32 0, i32 0))
  %s12 = load i8*, i8** %s
  %printf13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* %s12)
  ret i32 0
}

declare i32 @printf(i8*, ...)

define i32 @f1() {
entry:
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 1)
  ret i32 5
}

define i8* @f2() {
entry:
  %st = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @system_string.8, i32 0, i32 0), i8** %st
  %f1_result = call i32 @f1()
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %f1_result)
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @system_string.9, i32 0, i32 0), i8** %st
  %st1 = load i8*, i8** %st
  ret i8* %st1
}
