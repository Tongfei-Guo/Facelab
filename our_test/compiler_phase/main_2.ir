; ModuleID = 'MicroC'

@b = global i1 false
@j = global i32 0
@i = global i32 0
@fmt_str = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@system_string = private unnamed_addr constant [71 x i8] c"hello, this is the 2nd test program for remove int main restriction.\5Cn\00"
@fmt_str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.8 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.12 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.13 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.14 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.15 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.16 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.17 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.18 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.19 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.20 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.21 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.22 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.23 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.24 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.25 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.26 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.27 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.28 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.29 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.30 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.31 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.32 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt_str.33 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt_int.34 = private unnamed_addr constant [4 x i8] c"%d\0A\00"

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_str.1, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @system_string, i32 0, i32 0))
  %i = load i32, i32* @i
  %print_int = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_int.4, i32 0, i32 0), i32 %i)
  store i32 0, i32* @i
  %i1 = load i32, i32* @i
  %tmp = add i32 %i1, 3
  store i32 %tmp, i32* @i
  %i2 = load i32, i32* @i
  %print_int3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_int.10, i32 0, i32 0), i32 %i2)
  %i4 = load i32, i32* @i
  %tmp5 = add i32 %i4, 5
  store i32 %tmp5, i32* @j
  %j = load i32, i32* @j
  %print_int6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_int.14, i32 0, i32 0), i32 %j)
  store i1 true, i1* @b
  br label %while

while:                                            ; preds = %merge, %entry
  %b = load i1, i1* @b
  br i1 %b, label %while_body, label %merge13

while_body:                                       ; preds = %while
  %j7 = load i32, i32* @j
  %tmp8 = icmp ne i32 %j7, 3
  store i1 %tmp8, i1* @b
  %j9 = load i32, i32* @j
  %tmp10 = icmp sgt i32 %j9, 3
  br i1 %tmp10, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %j11 = load i32, i32* @j
  %tmp12 = sub i32 %j11, 1
  store i32 %tmp12, i32* @j
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge13:                                          ; preds = %while
  %j14 = load i32, i32* @j
  %print_int15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_int.32, i32 0, i32 0), i32 %j14)
  %j16 = load i32, i32* @j
  %tmp17 = add i32 %j16, 5
  %print_int18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_int.34, i32 0, i32 0), i32 %tmp17)
  ret i32 0
}
