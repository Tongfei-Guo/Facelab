; ModuleID = 'MicroC'
source_filename = "MicroC"

%return_t = type { i32 }

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_str.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_str.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@fmt_str.4 = private unnamed_addr constant [5 x i8] c"true\00"
@fmt_str.5 = private unnamed_addr constant [6 x i8] c"false\00"

define i32 @main() {
entry:
  %factorial_result = call %return_t* @factorial(i32 4)
  %v_ptr = getelementptr inbounds %return_t, %return_t* %factorial_result, i32 0, i32 0
  %v = load i32, i32* %v_ptr
  %0 = bitcast %return_t* %factorial_result to i8*
  tail call void @free(i8* %0)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %v)
  ret i32 0
}

declare i32 @printf(i8*, ...)

define %return_t* @factorial(i32) {
entry:
  %i = alloca i32
  store i32 %0, i32* %i
  %i7 = load i32, i32* %i
  %tmp8 = icmp eq i32 %i7, 1
  br i1 %tmp8, label %then, label %else

merge:                                            ; No predecessors!
  %tmp9 = alloca %return_t
  ret %return_t* %tmp9

then:                                             ; preds = %entry
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %return = bitcast i8* %malloccall to %return_t*
  %return0 = getelementptr inbounds %return_t, %return_t* %return, i32 0, i32 0
  store i32 1, i32* %return0
  ret %return_t* %return

else:                                             ; preds = %entry
  %malloccall1 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %return2 = bitcast i8* %malloccall1 to %return_t*
  %i3 = load i32, i32* %i
  %i4 = load i32, i32* %i
  %tmp = sub i32 %i4, 1
  %factorial_result = call %return_t* @factorial(i32 %tmp)
  %v_ptr = getelementptr inbounds %return_t, %return_t* %factorial_result, i32 0, i32 0
  %v = load i32, i32* %v_ptr
  %1 = bitcast %return_t* %factorial_result to i8*
  tail call void @free(i8* %1)
  %tmp5 = mul i32 %i3, %v
  %return06 = getelementptr inbounds %return_t, %return_t* %return2, i32 0, i32 0
  store i32 %tmp5, i32* %return06
  ret %return_t* %return2
}

declare noalias i8* @malloc(i32)

declare void @free(i8*)
