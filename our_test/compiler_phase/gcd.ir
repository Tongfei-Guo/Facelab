; ModuleID = 'MicroC'
source_filename = "MicroC"

%return_t = type { i32 }

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_str.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_str.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@fmt_str.4 = private unnamed_addr constant [5 x i8] c"true\00"
@fmt_str.5 = private unnamed_addr constant [6 x i8] c"false\00"

define i32 @main() {
entry:
  %m = alloca i32
  %gcd_result = call %return_t* @gcd(i32 81, i32 18)
  %v_ptr = getelementptr inbounds %return_t, %return_t* %gcd_result, i32 0, i32 0
  %v = load i32, i32* %v_ptr
  %0 = bitcast %return_t* %gcd_result to i8*
  tail call void @free(i8* %0)
  store i32 %v, i32* %m
  %m1 = load i32, i32* %m
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %m1)
  ret i32 0
}

declare i32 @printf(i8*, ...)

define %return_t* @gcd(i32, i32) {
entry:
  %m = alloca i32
  store i32 %0, i32* %m
  %n = alloca i32
  store i32 %1, i32* %n
  br label %while

while:                                            ; preds = %merge, %entry
  %m10 = load i32, i32* %m
  %tmp11 = icmp ne i32 %m10, 0
  %n12 = load i32, i32* %n
  %tmp13 = icmp ne i32 %n12, 0
  %tmp14 = and i1 %tmp11, %tmp13
  br i1 %tmp14, label %while_body, label %merge9

while_body:                                       ; preds = %while
  %n6 = load i32, i32* %n
  %m7 = load i32, i32* %m
  %tmp8 = icmp sgt i32 %n6, %m7
  br i1 %tmp8, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %n1 = load i32, i32* %n
  %m2 = load i32, i32* %m
  %tmp = srem i32 %n1, %m2
  store i32 %tmp, i32* %n
  br label %merge

else:                                             ; preds = %while_body
  %m3 = load i32, i32* %m
  %n4 = load i32, i32* %n
  %tmp5 = srem i32 %m3, %n4
  store i32 %tmp5, i32* %m
  br label %merge

merge9:                                           ; preds = %while
  %m23 = load i32, i32* %m
  %tmp24 = icmp eq i32 %m23, 0
  br i1 %tmp24, label %then16, label %else18

merge15:                                          ; No predecessors!
  %tmp25 = alloca %return_t
  ret %return_t* %tmp25

then16:                                           ; preds = %merge9
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %return = bitcast i8* %malloccall to %return_t*
  %n17 = load i32, i32* %n
  %return0 = getelementptr inbounds %return_t, %return_t* %return, i32 0, i32 0
  store i32 %n17, i32* %return0
  ret %return_t* %return

else18:                                           ; preds = %merge9
  %malloccall19 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %return20 = bitcast i8* %malloccall19 to %return_t*
  %m21 = load i32, i32* %m
  %return022 = getelementptr inbounds %return_t, %return_t* %return20, i32 0, i32 0
  store i32 %m21, i32* %return022
  ret %return_t* %return20
}

declare noalias i8* @malloc(i32)

declare void @free(i8*)
