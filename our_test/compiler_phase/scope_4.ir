; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_str.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_str.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@fmt_str.4 = private unnamed_addr constant [5 x i8] c"true\00"
@fmt_str.5 = private unnamed_addr constant [6 x i8] c"false\00"

define i32 @main() {
entry:
  %i = alloca i32
  store i32 0, i32* %i
  %j = alloca i32
  store i32 0, i32* %j
  %i1 = alloca i32
  store i32 10, i32* %i1
  store i32 1, i32* %j
  br label %while

while:                                            ; preds = %while_body, %entry
  %j6 = load i32, i32* %j
  %tmp7 = icmp sle i32 %j6, 10
  br i1 %tmp7, label %while_body, label %merge

while_body:                                       ; preds = %while
  %i2 = load i32, i32* %i
  %j3 = load i32, i32* %j
  %tmp = add i32 %i2, %j3
  store i32 %tmp, i32* %i
  %j4 = load i32, i32* %j
  %tmp5 = add i32 %j4, 1
  store i32 %tmp5, i32* %j
  br label %while

merge:                                            ; preds = %while
  %i8 = load i32, i32* %i
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %i8)
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_str.1, i32 0, i32 0))
  %j10 = load i32, i32* %j
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %j10)
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_str.1, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8*, ...)
