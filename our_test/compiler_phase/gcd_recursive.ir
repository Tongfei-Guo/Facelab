; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_str.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_str.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@fmt_str.4 = private unnamed_addr constant [5 x i8] c"true\00"
@fmt_str.5 = private unnamed_addr constant [6 x i8] c"false\00"

define i32 @main() {
entry:
  %gcd_result = call i32 @gcd(i32 252, i32 9)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %gcd_result)
  %printf1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_str.1, i32 0, i32 0))
  %gcd_result2 = call i32 @gcd(i32 71, i32 131)
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int, i32 0, i32 0), i32 %gcd_result2)
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_str.1, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8*, ...)

define i32 @gcd(i32, i32) {
entry:
  %m = alloca i32
  store i32 %0, i32* %m
  %n = alloca i32
  store i32 %1, i32* %n
  %m2 = load i32, i32* %m
  %tmp = icmp eq i32 %m2, 0
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else
  %n7 = load i32, i32* %n
  %tmp8 = icmp eq i32 %n7, 0
  br i1 %tmp8, label %then4, label %else6

then:                                             ; preds = %entry
  %n1 = load i32, i32* %n
  ret i32 %n1

else:                                             ; preds = %entry
  br label %merge

merge3:                                           ; preds = %else6
  %m21 = load i32, i32* %m
  %n22 = load i32, i32* %n
  %tmp23 = icmp sgt i32 %m21, %n22
  br i1 %tmp23, label %then10, label %else15

then4:                                            ; preds = %merge
  %m5 = load i32, i32* %m
  ret i32 %m5

else6:                                            ; preds = %merge
  br label %merge3

merge9:                                           ; No predecessors!
  ret i32 0

then10:                                           ; preds = %merge3
  %n11 = load i32, i32* %n
  %m12 = load i32, i32* %m
  %n13 = load i32, i32* %n
  %tmp14 = srem i32 %m12, %n13
  %gcd_result = call i32 @gcd(i32 %tmp14, i32 %n11)
  ret i32 %gcd_result

else15:                                           ; preds = %merge3
  %m16 = load i32, i32* %m
  %n17 = load i32, i32* %n
  %m18 = load i32, i32* %m
  %tmp19 = srem i32 %n17, %m18
  %gcd_result20 = call i32 @gcd(i32 %tmp19, i32 %m16)
  ret i32 %gcd_result20
}
