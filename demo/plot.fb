func factorial (int i)
{
    if (i==1)
    {
        return 1;
    }
    else
    {
        return i * factorial (i-1);
    }
}
func pow(double x, int i)
{
    double ret = 1.0;
    int j;
    for (j = 0; j!=i; j=j+1)
    {
        ret = x * ret;
    }
    return ret;
}
func quad(double a, double b, double c, double x)
{
    return a*x*x+b*x+c;
}
func cubic(double a, double b, double c, double d, double x)
{
    return a*x*x*x+b*x*x+c*x+d;
}
func sin_approx(double a, double x)
{
    double ret = 0.0;
    int i;
    for (i = 0; i != 15; i=i+1)
    {
        ret = ret + pow(x,i*2+1)*pow(-1.0, i)/factorial(i*2+1);
    }
    ret = ret * a;
    return ret;
}
matrix x = zeros(1,201);
matrix y = zeros(1,201);
int i;
for (i=0; i!= 201; i=i+1)
{
    x[0,i] = -10+i*0.1;
    //y[0,i] = quad(1.0, 0.0, -3.0, x[0,i]);
    y[0,i] = cubic(0.1, 0.0, -3.0, -5.0, x[0,i]);
    //y[0,i] = sin_approx(5.0, x[0,i]);
}
matrix plt_r = 254.0 + zeros(201,201);
matrix plt_g = 254.0 + zeros(201,201);
matrix plt_b = 254.0 + zeros(201,201);
for (i=0; i!= 201; i=i+1)
{
    plt_r[i,101] = 0.0;
    plt_r[101,i] = 0.0;
    plt_g[i,101] = 0.0;
    plt_g[101,i] = 0.0;
    plt_b[i,101] = 0.0;
    plt_b[101,i] = 0.0;
    if (((y[0,i]+10)/0.1 <= 200) && ((y[0,i]+10)/0.1 >= 0))
    {
        plt_r[double2int((y[0,i]+10)/0.1),i] = 0.0;
        plt_g[double2int((y[0,i]+10)/0.1),i] = 0.0;
    }
}
save(plt_r, plt_g, plt_b, "plot.jpg");

