; ModuleID = 'MicroC'
source_filename = "MicroC"

%matrix_t = type { double*, i32, i32 }

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_str.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_str.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@fmt_str.4 = private unnamed_addr constant [5 x i8] c"true\00"
@fmt_str.5 = private unnamed_addr constant [6 x i8] c"false\00"

define i32 @main() {
entry:
  %system_mat = alloca double, i32 12
  %element_ptr = getelementptr double, double* %system_mat, i32 0
  store double 1.000000e+00, double* %element_ptr
  %element_ptr1 = getelementptr double, double* %system_mat, i32 1
  store double 2.000000e+00, double* %element_ptr1
  %element_ptr2 = getelementptr double, double* %system_mat, i32 2
  store double 3.000000e+00, double* %element_ptr2
  %element_ptr3 = getelementptr double, double* %system_mat, i32 3
  store double 4.000000e+00, double* %element_ptr3
  %element_ptr4 = getelementptr double, double* %system_mat, i32 4
  store double 5.000000e+00, double* %element_ptr4
  %element_ptr5 = getelementptr double, double* %system_mat, i32 5
  store double 6.000000e+00, double* %element_ptr5
  %element_ptr6 = getelementptr double, double* %system_mat, i32 6
  store double 7.000000e+00, double* %element_ptr6
  %element_ptr7 = getelementptr double, double* %system_mat, i32 7
  store double 8.000000e+00, double* %element_ptr7
  %element_ptr8 = getelementptr double, double* %system_mat, i32 8
  store double 9.000000e+00, double* %element_ptr8
  %element_ptr9 = getelementptr double, double* %system_mat, i32 9
  store double 1.000000e+01, double* %element_ptr9
  %element_ptr10 = getelementptr double, double* %system_mat, i32 10
  store double 1.100000e+01, double* %element_ptr10
  %element_ptr11 = getelementptr double, double* %system_mat, i32 11
  store double 1.200000e+01, double* %element_ptr11
  %m = alloca %matrix_t
  %m_mat = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  store double* %system_mat, double** %m_mat
  %m_r = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  store i32 4, i32* %m_r
  %m_c = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  store i32 3, i32* %m_c
  %m_r12 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  %r_mat = load i32, i32* %m_r12
  %m_c13 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  %c_mat = load i32, i32* %m_c13
  %size = mul i32 %r_mat, %c_mat
  %system_mat14 = alloca double, i32 %size
  %m15 = alloca %matrix_t
  %m_mat16 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 0
  store double* %system_mat14, double** %m_mat16
  %m_r17 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 1
  store i32 %r_mat, i32* %m_r17
  %m_c18 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 2
  store i32 %c_mat, i32* %m_c18
  %tmp = sub i32 %r_mat, 1
  %tmp19 = sub i32 %c_mat, 1
  %i = alloca i32
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %merge, %entry
  %i_v30 = load i32, i32* %i
  %bool_val31 = icmp sle i32 %i_v30, %tmp
  br i1 %bool_val31, label %while_body, label %merge29

while_body:                                       ; preds = %while
  %j = alloca i32
  store i32 0, i32* %j
  br label %while20

while20:                                          ; preds = %while_body21, %while_body
  %j_v26 = load i32, i32* %j
  %bool_val = icmp sle i32 %j_v26, %tmp19
  br i1 %bool_val, label %while_body21, label %merge

while_body21:                                     ; preds = %while20
  %j_v = load i32, i32* %j
  %i_v = load i32, i32* %i
  %tmp22 = mul i32 %c_mat, %i_v
  %index = add i32 %j_v, %tmp22
  %element_ptr23 = getelementptr double, double* %system_mat14, i32 %index
  store double 0.000000e+00, double* %element_ptr23
  %j_v24 = load i32, i32* %j
  %tmp25 = add i32 %j_v24, 1
  store i32 %tmp25, i32* %j
  br label %while20

merge:                                            ; preds = %while20
  %i_v27 = load i32, i32* %i
  %tmp28 = add i32 %i_v27, 1
  store i32 %tmp28, i32* %i
  br label %while

merge29:                                          ; preds = %while
  %tmp32 = sub i32 %c_mat, 1
  %tmp33 = sub i32 %r_mat, 1
  %m_mat34 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 0
  %mat_mat = load double*, double** %m_mat34
  %m_r35 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 1
  %r_mat36 = load i32, i32* %m_r35
  %m_c37 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 2
  %c_mat38 = load i32, i32* %m_c37
  %m_mat39 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  %mat_v = load double*, double** %m_mat39
  %m_r40 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  %r_v = load i32, i32* %m_r40
  %m_c41 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  %c_v = load i32, i32* %m_c41
  %i42 = alloca i32
  store i32 0, i32* %i42
  br label %while43

while43:                                          ; preds = %merge64, %merge29
  %i_v70 = load i32, i32* %i42
  %bool_val71 = icmp sle i32 %i_v70, %tmp33
  br i1 %bool_val71, label %while_body44, label %merge69

while_body44:                                     ; preds = %while43
  %j45 = alloca i32
  store i32 0, i32* %j45
  br label %while46

while46:                                          ; preds = %while_body47, %while_body44
  %j_v65 = load i32, i32* %j45
  %bool_val66 = icmp sle i32 %j_v65, %tmp32
  br i1 %bool_val66, label %while_body47, label %merge64

while_body47:                                     ; preds = %while46
  %j_v48 = load i32, i32* %j45
  %i_v49 = load i32, i32* %i42
  %tmp50 = mul i32 %c_mat38, %i_v49
  %index51 = add i32 %j_v48, %tmp50
  %element_ptr52 = getelementptr double, double* %mat_mat, i32 %index51
  %j_v53 = load i32, i32* %j45
  %tmp54 = sub i32 %j_v53, 0
  %tmp55 = add i32 %tmp54, 0
  %i_v56 = load i32, i32* %i42
  %tmp57 = sub i32 %i_v56, 0
  %tmp58 = add i32 %tmp57, 0
  %tmp59 = mul i32 %c_v, %tmp58
  %index60 = add i32 %tmp55, %tmp59
  %element_ptr61 = getelementptr double, double* %mat_v, i32 %index60
  %tmp_element = load double, double* %element_ptr61
  store double %tmp_element, double* %element_ptr52
  %j_v62 = load i32, i32* %j45
  %tmp63 = add i32 %j_v62, 1
  store i32 %tmp63, i32* %j45
  br label %while46

merge64:                                          ; preds = %while46
  %i_v67 = load i32, i32* %i42
  %tmp68 = add i32 %i_v67, 1
  store i32 %tmp68, i32* %i42
  br label %while43

merge69:                                          ; preds = %while43
  %m_mat72 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 0
  %mat_mat73 = load double*, double** %m_mat72
  %m_r74 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 1
  %r_mat75 = load i32, i32* %m_r74
  %m_c76 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 2
  %c_mat77 = load i32, i32* %m_c76
  %tmp78 = sub i32 %r_mat75, 1
  %tmp79 = sub i32 %c_mat77, 1
  %i80 = alloca i32
  store i32 0, i32* %i80
  br label %while81

while81:                                          ; preds = %merge95, %merge69
  %i_v102 = load i32, i32* %i80
  %bool_val103 = icmp sle i32 %i_v102, %tmp78
  br i1 %bool_val103, label %while_body82, label %merge101

while_body82:                                     ; preds = %while81
  %j83 = alloca i32
  store i32 0, i32* %j83
  br label %while84

while84:                                          ; preds = %while_body85, %while_body82
  %j_v96 = load i32, i32* %j83
  %bool_val97 = icmp sle i32 %j_v96, %tmp79
  br i1 %bool_val97, label %while_body85, label %merge95

while_body85:                                     ; preds = %while84
  %j_v86 = load i32, i32* %j83
  %i_v87 = load i32, i32* %i80
  %tmp88 = mul i32 %c_mat77, %i_v87
  %index89 = add i32 %j_v86, %tmp88
  %element_ptr90 = getelementptr double, double* %mat_mat73, i32 %index89
  %tmp_element91 = load double, double* %element_ptr90
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_double, i32 0, i32 0), double %tmp_element91)
  %printf92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str.2, i32 0, i32 0))
  %j_v93 = load i32, i32* %j83
  %tmp94 = add i32 %j_v93, 1
  store i32 %tmp94, i32* %j83
  br label %while84

merge95:                                          ; preds = %while84
  %printf98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_str.1, i32 0, i32 0))
  %i_v99 = load i32, i32* %i80
  %tmp100 = add i32 %i_v99, 1
  store i32 %tmp100, i32* %i80
  br label %while81

merge101:                                         ; preds = %while81
  %printf104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @fmt_str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8*, ...)
