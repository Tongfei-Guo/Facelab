; ModuleID = 'MicroC'
source_filename = "MicroC"

%matrix_t = type { double*, i32, i32 }

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_int.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@fmt_int.2 = private unnamed_addr constant [3 x i8] c"  \00"
@fmt_int.3 = private unnamed_addr constant [1 x i8] zeroinitializer
@system_string = private unnamed_addr constant [4 x i8] c"var\00"
@system_string.4 = private unnamed_addr constant [4 x i8] c"fun\00"
@system_string.5 = private unnamed_addr constant [4 x i8] c"lit\00"

define i32 @main() {
entry:
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @system_string, i32 0, i32 0))
  %system_mat = alloca double, i32 12
  %element_ptr = getelementptr double, double* %system_mat, i32 0
  store double 1.000000e+00, double* %element_ptr
  %element_ptr1 = getelementptr double, double* %system_mat, i32 1
  store double 2.000000e+00, double* %element_ptr1
  %element_ptr2 = getelementptr double, double* %system_mat, i32 2
  store double 3.000000e+00, double* %element_ptr2
  %element_ptr3 = getelementptr double, double* %system_mat, i32 3
  store double 4.000000e+00, double* %element_ptr3
  %element_ptr4 = getelementptr double, double* %system_mat, i32 4
  store double 5.000000e+00, double* %element_ptr4
  %element_ptr5 = getelementptr double, double* %system_mat, i32 5
  store double 6.000000e+00, double* %element_ptr5
  %element_ptr6 = getelementptr double, double* %system_mat, i32 6
  store double 7.000000e+00, double* %element_ptr6
  %element_ptr7 = getelementptr double, double* %system_mat, i32 7
  store double 8.000000e+00, double* %element_ptr7
  %element_ptr8 = getelementptr double, double* %system_mat, i32 8
  store double 9.000000e+00, double* %element_ptr8
  %element_ptr9 = getelementptr double, double* %system_mat, i32 9
  store double 1.000000e+01, double* %element_ptr9
  %element_ptr10 = getelementptr double, double* %system_mat, i32 10
  store double 1.100000e+01, double* %element_ptr10
  %element_ptr11 = getelementptr double, double* %system_mat, i32 11
  store double 1.200000e+01, double* %element_ptr11
  %m = alloca %matrix_t
  %m_mat = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  store double* %system_mat, double** %m_mat
  %m_r = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  store i32 4, i32* %m_r
  %m_c = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  store i32 3, i32* %m_c
  %m_r12 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  %r_mat = load i32, i32* %m_r12
  %m_c13 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  %c_mat = load i32, i32* %m_c13
  %size = mul i32 %r_mat, %c_mat
  %system_mat14 = alloca double, i32 %size
  %m15 = alloca %matrix_t
  %m_mat16 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 0
  store double* %system_mat14, double** %m_mat16
  %m_r17 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 1
  store i32 %r_mat, i32* %m_r17
  %m_c18 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 2
  store i32 %c_mat, i32* %m_c18
  %tmp = sub i32 %c_mat, 1
  %tmp19 = sub i32 %r_mat, 1
  %m_mat20 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 0
  %mat_mat = load double*, double** %m_mat20
  %m_r21 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 1
  %r_mat22 = load i32, i32* %m_r21
  %m_c23 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 2
  %c_mat24 = load i32, i32* %m_c23
  %m_mat25 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  %mat_v = load double*, double** %m_mat25
  %m_r26 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  %r_v = load i32, i32* %m_r26
  %m_c27 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  %c_v = load i32, i32* %m_c27
  %i = alloca i32
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %merge, %entry
  %i_v47 = load i32, i32* %i
  %bool_val48 = icmp sle i32 %i_v47, %tmp19
  br i1 %bool_val48, label %while_body, label %merge46

while_body:                                       ; preds = %while
  %j = alloca i32
  store i32 0, i32* %j
  br label %while28

while28:                                          ; preds = %while_body29, %while_body
  %j_v43 = load i32, i32* %j
  %bool_val = icmp sle i32 %j_v43, %tmp
  br i1 %bool_val, label %while_body29, label %merge

while_body29:                                     ; preds = %while28
  %j_v = load i32, i32* %j
  %i_v = load i32, i32* %i
  %tmp30 = mul i32 %c_mat24, %i_v
  %index = add i32 %j_v, %tmp30
  %element_ptr31 = getelementptr double, double* %mat_mat, i32 %index
  %j_v32 = load i32, i32* %j
  %tmp33 = sub i32 %j_v32, 0
  %tmp34 = add i32 %tmp33, 0
  %i_v35 = load i32, i32* %i
  %tmp36 = sub i32 %i_v35, 0
  %tmp37 = add i32 %tmp36, 0
  %tmp38 = mul i32 %c_v, %tmp37
  %index39 = add i32 %tmp34, %tmp38
  %element_ptr40 = getelementptr double, double* %mat_v, i32 %index39
  %tmp_element = load double, double* %element_ptr40
  store double %tmp_element, double* %element_ptr31
  %j_v41 = load i32, i32* %j
  %tmp42 = add i32 %j_v41, 1
  store i32 %tmp42, i32* %j
  br label %while28

merge:                                            ; preds = %while28
  %i_v44 = load i32, i32* %i
  %tmp45 = add i32 %i_v44, 1
  store i32 %tmp45, i32* %i
  br label %while

merge46:                                          ; preds = %while
  %m_mat49 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 0
  %mat_mat50 = load double*, double** %m_mat49
  %m_r51 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 1
  %r_mat52 = load i32, i32* %m_r51
  %m_c53 = getelementptr inbounds %matrix_t, %matrix_t* %m15, i32 0, i32 2
  %c_mat54 = load i32, i32* %m_c53
  %tmp55 = sub i32 %r_mat52, 1
  %tmp56 = sub i32 %c_mat54, 1
  %i57 = alloca i32
  store i32 0, i32* %i57
  br label %while58

while58:                                          ; preds = %merge73, %merge46
  %i_v80 = load i32, i32* %i57
  %bool_val81 = icmp sle i32 %i_v80, %tmp55
  br i1 %bool_val81, label %while_body59, label %merge79

while_body59:                                     ; preds = %while58
  %j60 = alloca i32
  store i32 0, i32* %j60
  br label %while61

while61:                                          ; preds = %while_body62, %while_body59
  %j_v74 = load i32, i32* %j60
  %bool_val75 = icmp sle i32 %j_v74, %tmp56
  br i1 %bool_val75, label %while_body62, label %merge73

while_body62:                                     ; preds = %while61
  %j_v63 = load i32, i32* %j60
  %i_v64 = load i32, i32* %i57
  %tmp65 = mul i32 %c_mat54, %i_v64
  %index66 = add i32 %j_v63, %tmp65
  %element_ptr67 = getelementptr double, double* %mat_mat50, i32 %index66
  %tmp_element68 = load double, double* %element_ptr67
  %printf69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_double, i32 0, i32 0), double %tmp_element68)
  %printf70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int.2, i32 0, i32 0))
  %j_v71 = load i32, i32* %j60
  %tmp72 = add i32 %j_v71, 1
  store i32 %tmp72, i32* %j60
  br label %while61

merge73:                                          ; preds = %while61
  %printf76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_int.1, i32 0, i32 0))
  %i_v77 = load i32, i32* %i57
  %tmp78 = add i32 %i_v77, 1
  store i32 %tmp78, i32* %i57
  br label %while58

merge79:                                          ; preds = %while58
  %printf82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @fmt_int.3, i32 0, i32 0))
  %printf83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @system_string.4, i32 0, i32 0))
  call void @f(%matrix_t* %m15)
  %printf84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @system_string.5, i32 0, i32 0))
  %system_mat85 = alloca double, i32 12
  %element_ptr86 = getelementptr double, double* %system_mat85, i32 0
  store double 1.000000e+00, double* %element_ptr86
  %element_ptr87 = getelementptr double, double* %system_mat85, i32 1
  store double 2.000000e+00, double* %element_ptr87
  %element_ptr88 = getelementptr double, double* %system_mat85, i32 2
  store double 3.000000e+00, double* %element_ptr88
  %element_ptr89 = getelementptr double, double* %system_mat85, i32 3
  store double 4.000000e+00, double* %element_ptr89
  %element_ptr90 = getelementptr double, double* %system_mat85, i32 4
  store double 5.000000e+00, double* %element_ptr90
  %element_ptr91 = getelementptr double, double* %system_mat85, i32 5
  store double 6.000000e+00, double* %element_ptr91
  %element_ptr92 = getelementptr double, double* %system_mat85, i32 6
  store double 7.000000e+00, double* %element_ptr92
  %element_ptr93 = getelementptr double, double* %system_mat85, i32 7
  store double 8.000000e+00, double* %element_ptr93
  %element_ptr94 = getelementptr double, double* %system_mat85, i32 8
  store double 9.000000e+00, double* %element_ptr94
  %element_ptr95 = getelementptr double, double* %system_mat85, i32 9
  store double 1.000000e+01, double* %element_ptr95
  %element_ptr96 = getelementptr double, double* %system_mat85, i32 10
  store double 1.100000e+01, double* %element_ptr96
  %element_ptr97 = getelementptr double, double* %system_mat85, i32 11
  store double 1.200000e+01, double* %element_ptr97
  %m98 = alloca %matrix_t
  %m_mat99 = getelementptr inbounds %matrix_t, %matrix_t* %m98, i32 0, i32 0
  store double* %system_mat85, double** %m_mat99
  %m_r100 = getelementptr inbounds %matrix_t, %matrix_t* %m98, i32 0, i32 1
  store i32 4, i32* %m_r100
  %m_c101 = getelementptr inbounds %matrix_t, %matrix_t* %m98, i32 0, i32 2
  store i32 3, i32* %m_c101
  %m_mat102 = getelementptr inbounds %matrix_t, %matrix_t* %m98, i32 0, i32 0
  %mat_mat103 = load double*, double** %m_mat102
  %m_r104 = getelementptr inbounds %matrix_t, %matrix_t* %m98, i32 0, i32 1
  %r_mat105 = load i32, i32* %m_r104
  %m_c106 = getelementptr inbounds %matrix_t, %matrix_t* %m98, i32 0, i32 2
  %c_mat107 = load i32, i32* %m_c106
  %tmp108 = sub i32 %r_mat105, 1
  %tmp109 = sub i32 %c_mat107, 1
  %i110 = alloca i32
  store i32 0, i32* %i110
  br label %while111

while111:                                         ; preds = %merge126, %merge79
  %i_v133 = load i32, i32* %i110
  %bool_val134 = icmp sle i32 %i_v133, %tmp108
  br i1 %bool_val134, label %while_body112, label %merge132

while_body112:                                    ; preds = %while111
  %j113 = alloca i32
  store i32 0, i32* %j113
  br label %while114

while114:                                         ; preds = %while_body115, %while_body112
  %j_v127 = load i32, i32* %j113
  %bool_val128 = icmp sle i32 %j_v127, %tmp109
  br i1 %bool_val128, label %while_body115, label %merge126

while_body115:                                    ; preds = %while114
  %j_v116 = load i32, i32* %j113
  %i_v117 = load i32, i32* %i110
  %tmp118 = mul i32 %c_mat107, %i_v117
  %index119 = add i32 %j_v116, %tmp118
  %element_ptr120 = getelementptr double, double* %mat_mat103, i32 %index119
  %tmp_element121 = load double, double* %element_ptr120
  %printf122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_double, i32 0, i32 0), double %tmp_element121)
  %printf123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int.2, i32 0, i32 0))
  %j_v124 = load i32, i32* %j113
  %tmp125 = add i32 %j_v124, 1
  store i32 %tmp125, i32* %j113
  br label %while114

merge126:                                         ; preds = %while114
  %printf129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_int.1, i32 0, i32 0))
  %i_v130 = load i32, i32* %i110
  %tmp131 = add i32 %i_v130, 1
  store i32 %tmp131, i32* %i110
  br label %while111

merge132:                                         ; preds = %while111
  %printf135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @fmt_int.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8*, ...)

define void @f(%matrix_t*) {
entry:
  %m_r = getelementptr inbounds %matrix_t, %matrix_t* %0, i32 0, i32 1
  %r_mat = load i32, i32* %m_r
  %m_c = getelementptr inbounds %matrix_t, %matrix_t* %0, i32 0, i32 2
  %c_mat = load i32, i32* %m_c
  %size = mul i32 %r_mat, %c_mat
  %system_mat = alloca double, i32 %size
  %m = alloca %matrix_t
  %m_mat = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  store double* %system_mat, double** %m_mat
  %m_r1 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  store i32 %r_mat, i32* %m_r1
  %m_c2 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  store i32 %c_mat, i32* %m_c2
  %tmp = sub i32 %c_mat, 1
  %tmp3 = sub i32 %r_mat, 1
  %m_mat4 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  %mat_mat = load double*, double** %m_mat4
  %m_r5 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  %r_mat6 = load i32, i32* %m_r5
  %m_c7 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  %c_mat8 = load i32, i32* %m_c7
  %m_mat9 = getelementptr inbounds %matrix_t, %matrix_t* %0, i32 0, i32 0
  %mat_v = load double*, double** %m_mat9
  %m_r10 = getelementptr inbounds %matrix_t, %matrix_t* %0, i32 0, i32 1
  %r_v = load i32, i32* %m_r10
  %m_c11 = getelementptr inbounds %matrix_t, %matrix_t* %0, i32 0, i32 2
  %c_v = load i32, i32* %m_c11
  %i = alloca i32
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %merge, %entry
  %i_v30 = load i32, i32* %i
  %bool_val31 = icmp sle i32 %i_v30, %tmp3
  br i1 %bool_val31, label %while_body, label %merge29

while_body:                                       ; preds = %while
  %j = alloca i32
  store i32 0, i32* %j
  br label %while12

while12:                                          ; preds = %while_body13, %while_body
  %j_v26 = load i32, i32* %j
  %bool_val = icmp sle i32 %j_v26, %tmp
  br i1 %bool_val, label %while_body13, label %merge

while_body13:                                     ; preds = %while12
  %j_v = load i32, i32* %j
  %i_v = load i32, i32* %i
  %tmp14 = mul i32 %c_mat8, %i_v
  %index = add i32 %j_v, %tmp14
  %element_ptr = getelementptr double, double* %mat_mat, i32 %index
  %j_v15 = load i32, i32* %j
  %tmp16 = sub i32 %j_v15, 0
  %tmp17 = add i32 %tmp16, 0
  %i_v18 = load i32, i32* %i
  %tmp19 = sub i32 %i_v18, 0
  %tmp20 = add i32 %tmp19, 0
  %tmp21 = mul i32 %c_v, %tmp20
  %index22 = add i32 %tmp17, %tmp21
  %element_ptr23 = getelementptr double, double* %mat_v, i32 %index22
  %tmp_element = load double, double* %element_ptr23
  store double %tmp_element, double* %element_ptr
  %j_v24 = load i32, i32* %j
  %tmp25 = add i32 %j_v24, 1
  store i32 %tmp25, i32* %j
  br label %while12

merge:                                            ; preds = %while12
  %i_v27 = load i32, i32* %i
  %tmp28 = add i32 %i_v27, 1
  store i32 %tmp28, i32* %i
  br label %while

merge29:                                          ; preds = %while
  %m_mat32 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 0
  %mat_mat33 = load double*, double** %m_mat32
  %m_r34 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 1
  %r_mat35 = load i32, i32* %m_r34
  %m_c36 = getelementptr inbounds %matrix_t, %matrix_t* %m, i32 0, i32 2
  %c_mat37 = load i32, i32* %m_c36
  %tmp38 = sub i32 %r_mat35, 1
  %tmp39 = sub i32 %c_mat37, 1
  %i40 = alloca i32
  store i32 0, i32* %i40
  br label %while41

while41:                                          ; preds = %merge55, %merge29
  %i_v62 = load i32, i32* %i40
  %bool_val63 = icmp sle i32 %i_v62, %tmp38
  br i1 %bool_val63, label %while_body42, label %merge61

while_body42:                                     ; preds = %while41
  %j43 = alloca i32
  store i32 0, i32* %j43
  br label %while44

while44:                                          ; preds = %while_body45, %while_body42
  %j_v56 = load i32, i32* %j43
  %bool_val57 = icmp sle i32 %j_v56, %tmp39
  br i1 %bool_val57, label %while_body45, label %merge55

while_body45:                                     ; preds = %while44
  %j_v46 = load i32, i32* %j43
  %i_v47 = load i32, i32* %i40
  %tmp48 = mul i32 %c_mat37, %i_v47
  %index49 = add i32 %j_v46, %tmp48
  %element_ptr50 = getelementptr double, double* %mat_mat33, i32 %index49
  %tmp_element51 = load double, double* %element_ptr50
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_double, i32 0, i32 0), double %tmp_element51)
  %printf52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_int.2, i32 0, i32 0))
  %j_v53 = load i32, i32* %j43
  %tmp54 = add i32 %j_v53, 1
  store i32 %tmp54, i32* %j43
  br label %while44

merge55:                                          ; preds = %while44
  %printf58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @fmt_int.1, i32 0, i32 0))
  %i_v59 = load i32, i32* %i40
  %tmp60 = add i32 %i_v59, 1
  store i32 %tmp60, i32* %i40
  br label %while41

merge61:                                          ; preds = %while41
  %printf64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @fmt_int.3, i32 0, i32 0))
  ret void
}
