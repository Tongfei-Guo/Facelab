; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt_str = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00"
@fmt_str.1 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.2 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.3 = private unnamed_addr constant [3 x i8] c"%d\00"
@system_string = private unnamed_addr constant [8 x i8] c"abcdedg\00"
@fmt_str.4 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.5 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.6 = private unnamed_addr constant [3 x i8] c"%d\00"
@system_string.7 = private unnamed_addr constant [3 x i8] c"cd\00"
@fmt_str.8 = private unnamed_addr constant [3 x i8] c"%s\00"
@fmt_double.9 = private unnamed_addr constant [3 x i8] c"%f\00"
@fmt_int.10 = private unnamed_addr constant [3 x i8] c"%d\00"

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %a = alloca i8*
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @system_string, i32 0, i32 0), i8** %a
  %b = alloca i8*
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @system_string.7, i32 0, i32 0), i8** %b
  %a1 = load i8*, i8** %a
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt_str.8, i32 0, i32 0), i8* %a1)
  ret i32 0
}
